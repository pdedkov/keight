// Code generated by "enumer -type Tag -json -sql -text -transform=snake"; DO NOT EDIT.

package logging

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _TagName = "serviceappdbenverrorpanicargsaddressformnamefilenamesizeidlen"

var _TagIndex = [...]uint8{0, 7, 10, 12, 15, 20, 25, 29, 36, 44, 52, 56, 58, 61}

const _TagLowerName = "serviceappdbenverrorpanicargsaddressformnamefilenamesizeidlen"

func (i Tag) String() string {
	i -= 1
	if i < 0 || i >= Tag(len(_TagIndex)-1) {
		return fmt.Sprintf("Tag(%d)", i+1)
	}
	return _TagName[_TagIndex[i]:_TagIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TagNoOp() {
	var x [1]struct{}
	_ = x[Service-(1)]
	_ = x[App-(2)]
	_ = x[DB-(3)]
	_ = x[Env-(4)]
	_ = x[Error-(5)]
	_ = x[Panic-(6)]
	_ = x[Args-(7)]
	_ = x[Address-(8)]
	_ = x[Formname-(9)]
	_ = x[Filename-(10)]
	_ = x[Size-(11)]
	_ = x[ID-(12)]
	_ = x[Len-(13)]
}

var _TagValues = []Tag{Service, App, DB, Env, Error, Panic, Args, Address, Formname, Filename, Size, ID, Len}

var _TagNameToValueMap = map[string]Tag{
	_TagName[0:7]:        Service,
	_TagLowerName[0:7]:   Service,
	_TagName[7:10]:       App,
	_TagLowerName[7:10]:  App,
	_TagName[10:12]:      DB,
	_TagLowerName[10:12]: DB,
	_TagName[12:15]:      Env,
	_TagLowerName[12:15]: Env,
	_TagName[15:20]:      Error,
	_TagLowerName[15:20]: Error,
	_TagName[20:25]:      Panic,
	_TagLowerName[20:25]: Panic,
	_TagName[25:29]:      Args,
	_TagLowerName[25:29]: Args,
	_TagName[29:36]:      Address,
	_TagLowerName[29:36]: Address,
	_TagName[36:44]:      Formname,
	_TagLowerName[36:44]: Formname,
	_TagName[44:52]:      Filename,
	_TagLowerName[44:52]: Filename,
	_TagName[52:56]:      Size,
	_TagLowerName[52:56]: Size,
	_TagName[56:58]:      ID,
	_TagLowerName[56:58]: ID,
	_TagName[58:61]:      Len,
	_TagLowerName[58:61]: Len,
}

var _TagNames = []string{
	_TagName[0:7],
	_TagName[7:10],
	_TagName[10:12],
	_TagName[12:15],
	_TagName[15:20],
	_TagName[20:25],
	_TagName[25:29],
	_TagName[29:36],
	_TagName[36:44],
	_TagName[44:52],
	_TagName[52:56],
	_TagName[56:58],
	_TagName[58:61],
}

// TagString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TagString(s string) (Tag, error) {
	if val, ok := _TagNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TagNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Tag values", s)
}

// TagValues returns all values of the enum
func TagValues() []Tag {
	return _TagValues
}

// TagStrings returns a slice of all String values of the enum
func TagStrings() []string {
	strs := make([]string, len(_TagNames))
	copy(strs, _TagNames)
	return strs
}

// IsATag returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Tag) IsATag() bool {
	for _, v := range _TagValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Tag
func (i Tag) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Tag
func (i *Tag) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Tag should be a string, got %s", data)
	}

	var err error
	*i, err = TagString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Tag
func (i Tag) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Tag
func (i *Tag) UnmarshalText(text []byte) error {
	var err error
	*i, err = TagString(string(text))
	return err
}

func (i Tag) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Tag) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Tag: %[1]T(%[1]v)", value)
	}

	val, err := TagString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
